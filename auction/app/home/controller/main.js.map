{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\home\\controller\\main.js"
    ],
    "names": [],
    "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;AACA;;;;;;;;;;IAEqB;;;;;;;;iBACnB,qCAAc;AACZ,QAAI,UAAU,KAAK,MAAL,CAAY,KAAZ,CAAV,CADQ;AAEZ,cAAU,MAAM,MAAN,CAAa,EAAb,EAAiB,OAAjB,EAA0B,EAAC,MAAM,KAAN,EAA3B,CAAV,CAFY;AAGZ,QAAI,OAAO,eAAK,OAAL,CAAa,MAAM,SAAN,EAAiB,uBAA9B,CAAP,CAHQ;AAIZ,WAAO,KAAK,OAAL,CAAa,IAAb,EAAmB,OAAnB,CAAP,CAJY;;;AADK,iBAQb;;UACA,SACA,SAIA,WACA,UACA;;;;;AAPA,wBAAU,KAAK,KAAL,CAAW,SAAX;AACV,wBAAU,MAAM,OAAN,CAAc,SAAd,CAAwB,OAAxB,EAAiC;AAC7C,wBAAQ,IAAR;AACA,kCAAkB,IAAlB;eAFY;AAIV,0BAAY,MAAM,KAAN,CAAY,MAAZ,EAAoB,IAApB,EAA0B,MAA1B;;qBACK,UAAU,MAAV;;;AAAjB;AACA,uBAAS,SACV,GADU,CACN,UAAC,IAAD,EAAS;AACZ,oBAAI,YAAY,CAAZ,CADQ;AAEZ,oBAAI,cAAc,CAAd,CAFQ;;AAIZ,qCAAc,8HAAd,IAAuB;;;;;;;;;;;;sBAAd,SAAc;;AACrB,+BAAa,CAAC,KAAK,IAAL,IAAa,EAAb,CAAD,CAAkB,KAAlB,CAAwB,CAAxB,EAA2B,MAA3B,GAAoC,CAApC,CADQ;AAErB,iCAAe,CAAC,KAAK,IAAL,IAAa,EAAb,CAAD,CAAkB,KAAlB,CAAwB,CAAxB,EAA2B,MAA3B,GAAoC,CAApC,CAFM;iBAAvB;AAIA,qBAAK,SAAL,GAAiB,YAAY,CAAZ,GAAgB,WAAhB,CARL;AASZ,uBAAO,IAAP,CATY;eAAT,CADM,CAYV,MAZU,CAYH,UAAC,CAAD;uBAAK,EAAE,SAAF;eAAL,CAZG,CAaV,IAbU,CAaL,UAAC,CAAD,EAAI,CAAJ;uBAAQ,EAAE,SAAF,GAAc,EAAE,SAAF,IAAe,EAAE,QAAF,CAAW,OAAX,KAAuB,EAAE,QAAF,CAAW,OAAX,EAAvB;eAArC;+CAGD,KAAK,OAAL,CAAa,MAAb;;;;;;;;;;;;;;;;;AAhCU,iBAmCb;;UAEE;;;;;;;qBAAe,MAAM,KAAN,CAAY,KAAZ,EAAmB,IAAnB,EAAyB,MAAzB,EAAiC,MAAjC;;;AAAf;gDACG,KAAK,OAAL,CAAa,MAAb;;;;;;AAEP,sBAAQ,GAAR;gDACO,KAAK,IAAL;;;;;;;;;;;;;;;;;SAzCQ",
    "file": "..\\..\\..\\src\\home\\controller\\main.js",
    "sourcesContent": [
        "/**\r\n * Created by zl on 2015/12/31.\r\n */\r\nimport Base from './base';\r\nimport path from 'path';\r\n\r\nexport default class Main extends Base {\r\n  indexAction() {\r\n    let options = this.config('tpl');\r\n    options = think.extend({}, options, {type: 'ejs'});\r\n    let file = path.resolve(think.ROOT_PATH, 'www/static/index.html');\r\n    return this.display(file, options);\r\n  }\r\n\r\n  async searchAction() {\r\n    let keyword = this.param('keyword');\r\n    let segment = think.segment.doSegment(keyword, {\r\n      simple: true,\r\n      stripPunctuation: true\r\n    });\r\n    let itemModel = think.model('item', null, 'home');\r\n    let allItems = await itemModel.select();\r\n    let result = allItems\r\n      .map((item)=> {\r\n        let titleHint = 0;\r\n        let contentHint = 0;\r\n\r\n        for (let i of segment) {\r\n          titleHint += (item.name || '').split(i).length - 1;\r\n          contentHint += (item.desc || '').split(i).length - 1;\r\n        }\r\n        item.hintTimes = titleHint * 2 + contentHint;\r\n        return item;\r\n      })\r\n      .filter((i)=>i.hintTimes)\r\n      .sort((x, y)=>y.hintTimes - x.hintTimes || y.createAt.valueOf() - x.createAt.valueOf());\r\n\r\n\r\n    return this.success(result);\r\n  }\r\n\r\n  async testAction() {\r\n    try {\r\n      let result = await think.model('bid', null, 'home').select();\r\n      return this.success(result);\r\n    } catch (err) {\r\n      console.log(err);\r\n      return this.fail(err);\r\n    }\r\n\r\n  }\r\n}"
    ]
}