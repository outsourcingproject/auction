{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\home\\model\\user.js"
    ],
    "names": [],
    "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AAEA,IAAI,WAAW,QAAQ,cAAR,EAAwB,IAAxB,CAA6B,QAA7B;;;;;;;;;;;IAOM;;;;;;;;;;;;gJACnB,SAAS;AACP,gBAAU;AACR,cAAM,MAAN;AACA,kBAAU,IAAV;AACA,gBAAQ,IAAR;OAHF;AAKA,gBAAU;AACR,cAAM,MAAN;AACA,kBAAU,IAAV;OAFF;AAIA,aAAO;AACL,cAAM,MAAN;AACA,kBAAU,IAAV;OAFF;AAIA,qBAAe;AACb,cAAM,OAAN;AACA,kBAAU,IAAV;AACA,iBAAS,KAAT;OAHF;AAKA,aAAO;AACL,cAAM,MAAN;AACA,iBAAS,CAAT;OAFF;AAIA,YAAM;;AAEJ,cAAM,MAAN;AACA,kBAAS,IAAT;OAHF;AAKA,gBAAU;AACR,cAAM,IAAN;AACA,kBAAU,IAAV;AACA,iBAAS;iBAAI,IAAI,IAAJ;SAAJ;OAHX;AAKA,gBAAU;AACR,cAAM,IAAN;AACA,kBAAU,IAAV;AACA,iBAAS;iBAAI,IAAI,IAAJ;SAAJ;OAHX;aAOF,UAAQ;AACN,gBAAS,EAAC,SAAS,CAAT,EAAV;;;;;;;;;;;;;AA1CiB,iBAqDb;0FAAW,UAAU,UAAU;UAAO,6DAAO;UAC7C;;;;;;qBAAe,KAAK,KAAL,CAAW,EAAC,kBAAD,EAAX,EAAuB,MAAvB;;;AAAf;;kBACC,MAAM,OAAN,CAAc,MAAd;;;;;+CACI;;;;qBAEM,KAAK,KAAL,CAAW,EAAC,YAAD,EAAX,EAAoB,MAApB;;;AAAf;;kBACK,MAAM,OAAN,CAAc,MAAd;;;;;+CACI;;;;qBAEM,KAAK,GAAL,CAAS,EAAC,kBAAD,EAAW,kBAAX,EAAqB,YAArB,EAA4B,UAA5B,EAAT;;;AAAf;+CAEO,KAAK,KAAL,CAAW,EAAC,KAAK,MAAL,EAAZ,EAA0B,IAA1B;;;;;;;;;;;;;;;;;;;;;;;;;AAhEU,iBA0Eb;2FAAU,UAAU;UACpB;;;;;;qBAAe,KAAK,KAAL,CAAW,EAAC,kBAAD,EAAX,EAAuB,IAAvB;;;AAAf;;mBACA,MAAM,OAAN,CAAc,MAAd;;;;;gDACK;;;oBAEL,OAAO,QAAP,IAAmB,QAAnB;;;;;gDACK;;;gDAEF;;;;;;;;;;;;;;;;;;;;;;;;AAlFU,iBA0FnB,2BAAQ,UAAU;AAChB,WAAO,KAAK,KAAL,CAAW,EAAC,kBAAD,EAAX,EAAuB,MAAvB,EAAP,CADgB;;;;;;;;;;AA1FC,iBAmGb;2FAAY;UACZ,MACA;;;;;;qBADa,KAAK,KAAL,CAAW,EAAC,kBAAD,EAAX,EAAuB,IAAvB;;;AAAb;AACA,0BAAY,MAAM,KAAN,CAAY,MAAZ,EAAoB,IAApB,EAA0B,MAA1B;gDACT,UAAU,KAAV,CAAgB,EAAC,MAAM,KAAK,IAAL,EAAvB,EAAmC,IAAnC;;;;;;;;;;;;;;;;;;;;;;;;AAtGU,iBA8Gb;2FAAmB;UACnB,WAEA,MACA;;;;;AAHA,0BAAY,MAAM,KAAN,CAAY,MAAZ,EAAoB,IAApB,EAA0B,MAA1B;;qBAEC,KAAK,KAAL,CAAW,EAAC,kBAAD,EAAX,EAAuB,IAAvB;;;AAAb;;qBACa,UAAU,KAAV,CAAgB,EAAC,MAAM,KAAK,IAAL,EAAvB,EAAmC,IAAnC;;;AAAb;gDAEG,UAAU,kBAAV,CAA6B,KAAK,IAAL;;;;;;;;;;;;;;;;;SApHnB",
    "file": "..\\..\\..\\src\\home\\model\\user.js",
    "sourcesContent": [
        "/**\r\n * Created by zl on 2015/12/30.\r\n */\r\nimport Base from './base.js'\r\n\r\nlet ObjectID = require('mongodb-core').BSON.ObjectID;\r\n\r\n/**\r\n * 成功时返回true或者具体对象\r\n * 失败时返回失败字符串,具体请参看 /src/common/config/local/en.js\r\n * 如果没有当前需要的失败字符串,请在该文件中定义\r\n */\r\nexport default class User extends Base {\r\n  schema = {\r\n    username: {\r\n      type: String,\r\n      required: true,\r\n      unique: true\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    emailValidate: {\r\n      type: Boolean,\r\n      required: true,\r\n      default: false\r\n    },\r\n    level: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    role: {\r\n      //ref to collection role.name\r\n      type: String,\r\n      required:true\r\n    },\r\n    createAt: {\r\n      type: Date,\r\n      required: true,\r\n      default: ()=>new Date()\r\n    },\r\n    updateAt: {\r\n      type: Date,\r\n      required: true,\r\n      default: ()=>new Date()\r\n    }\r\n  };\r\n  \r\n  indexes={\r\n    username:{$unique: 1}\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param username\r\n   * @param password\r\n   * @param email\r\n   * @param role\r\n   * @returns {*} user object if success, otherwise err string\r\n   */\r\n  async createUser(username, password, email, role = 'registered') {\r\n    let result = await this.where({username}).select();\r\n    if (!think.isEmpty(result)) {\r\n      return 'USER_ALREADY_EXIST';\r\n    }\r\n    result = await this.where({email}).select();\r\n    if (!think.isEmpty(result)) {\r\n      return 'EMAIL_ALREADY_USED';\r\n    }\r\n    result = await this.add({username, password, email, role});\r\n\r\n    return this.where({_id: result}).find();\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param username\r\n   * @param password\r\n   * @returns {*} user object if success, otherwise err string\r\n   */\r\n  async checkUser(username, password) {\r\n    let result = await this.where({username}).find();\r\n    if (think.isEmpty(result)) {\r\n      return 'NO_THIS_USER';\r\n    }\r\n    if (result.password != password) {\r\n      return 'PASSWORD_WORRY';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param username\r\n   * @returns {Promise}\r\n   */\r\n  delUser(username) {\r\n    return this.where({username}).delete();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param username\r\n   * @returns {Promise<Role>}\r\n   */\r\n  async getUserRole(username) {\r\n    let user = await this.where({username}).find();\r\n    let roleModel = think.model('role', null, 'home');\r\n    return roleModel.where({name: user.role}).find();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param username\r\n   * @returns {Promise<[Authority]>}\r\n   */\r\n  async getUserAuthorities(username) {\r\n    let roleModel = think.model('role', null, 'home');\r\n\r\n    let user = await this.where({username}).find();\r\n    let role = await roleModel.where({name: user.role}).find();\r\n\r\n    return roleModel.getRoleAuthorities(role.name);\r\n\r\n  }\r\n}"
    ]
}