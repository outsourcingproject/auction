{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\home\\model\\authority.js"
    ],
    "names": [],
    "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IACqB;;;;;;;;;;;;gJACnB,SAAS;AACP,YAAM;AACJ,cAAM,MAAN;AACA,kBAAU,IAAV;AACA,gBAAQ,IAAR;AACA,iBAAS,EAAT;OAJF;AAMA,YAAM;AACJ,cAAM,MAAN;AACA,kBAAU,IAAV;AACA,iBAAS,EAAT;OAHF;AAKA,aAAO;AACL,cAAM,CAAC,SAAO,MAAP,CAAP;AACA,kBAAU,IAAV;AACA,iBAAS,EAAT;OAHF;AAKA,gBAAU;AACR,cAAK,IAAL;AACA,kBAAU,IAAV;AACA,iBAAS;iBAAI,IAAI,IAAJ;SAAJ;OAHX;AAKA,gBAAU;AACR,cAAK,IAAL;AACA,kBAAU,IAAV;AACA,iBAAS;iBAAI,IAAI,IAAJ;SAAJ;OAHX;aAOF,UAAQ;AACN,YAAK,EAAC,SAAS,CAAT,EAAN;;;;;;;;;;;;AA/BiB,sBAwCb;0FAAa;UAAM,6DAAO;UAAI,8DAAQ;UAEtC;;;;;;qBAAe,KAAK,OAAL,CAAa,EAAC,UAAD,EAAO,UAAP,EAAa,YAAb,EAAb,EAAkC,EAAC,UAAD,EAAlC;;;AAAf;;oBACA,OAAO,IAAP,IAAe,KAAf;;;;;+CACK;;;+CAEA;;;;;;;;;;;;;;;;;;;;;;;;AA9CQ,sBAuDnB,qCAAa,MAAM;AACjB,WAAO,KAAK,KAAL,CAAW,EAAC,UAAD,EAAX,EAAmB,MAAnB,EAAP,CADiB;;;SAvDA",
    "file": "..\\..\\..\\src\\home\\model\\authority.js",
    "sourcesContent": [
        "import Base from './base.js'\r\nexport default class Authority extends Base {\r\n  schema = {\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n      default: ''\r\n    },\r\n    desc: {\r\n      type: String,\r\n      required: true,\r\n      default: ''\r\n    },\r\n    paths: {\r\n      type: [String|RegExp],\r\n      required: true,\r\n      default: []\r\n    },\r\n    createAt: {\r\n      type:Date,\r\n      required: true,\r\n      default: ()=>new Date()\r\n    },\r\n    updateAt: {\r\n      type:Date,\r\n      required: true,\r\n      default: ()=>new Date()\r\n    }\r\n  };\r\n\r\n  indexes={\r\n    name:{$unique: 1}\r\n  };\r\n  /**\r\n   *\r\n   * @param name\r\n   * @param desc\r\n   * @param paths {[String|RegExp]}\r\n   * @returns {*} true if success, otherwise err string\r\n   */\r\n  async addAuthority(name, desc = '', paths = []) {\r\n\r\n    let result = await this.thenAdd({name, desc, paths}, {name});\r\n    if (result.type == 'add') {\r\n      return true;\r\n    } else {\r\n      return 'AUTHORITY_ALREADY_EXIST';\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name\r\n   * @returns {Promise}\r\n   */\r\n  delAuthority(name) {\r\n    return this.where({name}).delete();\r\n  }\r\n\r\n}"
    ]
}