{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\home\\model\\role.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "..\\..\\..\\src\\home\\model\\role.js",
    "sourcesContent": [
        "import Base from './base'\r\nlet ObjectID = require('mongodb-core').BSON.ObjectID;\r\n\r\nexport default class Role extends Base {\r\n  schema = {\r\n    name: {\r\n      required: true,\r\n      default: '',\r\n      unique: true\r\n    },\r\n    desc: {\r\n      required: true,\r\n      default: ''\r\n    },\r\n    //继承那些角色的权限\r\n    extend: {\r\n      //ref to collection Role.name\r\n      type: [String],\r\n      required: true,\r\n      default: []\r\n    },\r\n    authorities: {\r\n      default: [],\r\n      type: [ObjectID]\r\n    },\r\n    createAt: {\r\n      type: Date,\r\n      required: true,\r\n      default: ()=>new Date()\r\n    },\r\n    updateAt: {\r\n      type: Date,\r\n      required: true,\r\n      default: ()=>new Date()\r\n    }\r\n  };\r\n\r\n  indexes={\r\n    name:{$unique: 1}\r\n  };\r\n  /**\r\n   *\r\n   * @param name\r\n   * @param desc\r\n   * @param extend {[String]}\r\n   * @param authorities\r\n   * @returns {*} true if success, otherwise err string\r\n   */\r\n  async addRole(name, desc = '', extend = ['anonymous', 'registered'], authorities = []) {\r\n    let result = await this.thenAdd({name, desc, extend, authorities}, {name});\r\n    if (result.type == 'add') {\r\n      return true;\r\n    } else {\r\n      return 'ROLE_ALREADY_EXIST';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TODO: del other role's extend\r\n   * TODO: del user's role, if none, should assign to what\r\n   * @param name {String}\r\n   * @returns {Promise}\r\n   */\r\n  delRole(name) {\r\n    return this.where({name}).delete();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name {String} name of role\r\n   * @param authorities {ObjectID} authorities' name\r\n   * @returns {Promise}\r\n   */\r\n  addAuthorities(name, ...authorities) {\r\n    let role = this.where({name}).find();\r\n    for (let authority of authorities) {\r\n\r\n      if (!role.authorities.includes(authority)) {\r\n        role.authorities.push(authority);\r\n      }\r\n    }\r\n    return this.where({name}).update({authorities});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name {String} name of role\r\n   * @param authorities {String} authorities' name\r\n   * @returns {Promise}\r\n   */\r\n  rmAuthorities(name, ...authorities) {\r\n\r\n    let role = this.where({name}).find();\r\n    for (let authority of authorities) {\r\n      let index = role.authorities.indexOf(authority);\r\n      if (index >= 0) {\r\n        role.authorities.slice(index, 1);\r\n      }\r\n    }\r\n    return this.where({name}).update({authorities});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name {String}\r\n   * @param newName {String}\r\n   * @returns {Promise}\r\n   */\r\n  changeName(name, newName) {\r\n    return this.where({name}).update({name: newName});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name {String}\r\n   * @param desc {desc}\r\n   * @returns {Promise}\r\n   */\r\n  changeDesc(name, desc) {\r\n    return this.where({name}).update({desc});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param name {String} name of role\r\n   * @returns {Promise<[Authority]>} authority's array\r\n   */\r\n  async getRoleAuthorities(name) {\r\n    let authorityModel = think.model('authority', null, 'home');\r\n\r\n    let addAuthorities = (arr, au)=> {\r\n      for (let i of au) {\r\n        let has = false;\r\n        for (let j of arr) {\r\n          if (i.name == j.name) {\r\n            has = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!has) {\r\n          arr.push(i);\r\n        }\r\n      }\r\n    };\r\n\r\n    let getAuthorities = async(name)=> {\r\n      let role = await this.where({name}).find();\r\n      if (think.isEmpty(role)) {\r\n        return [];\r\n      }\r\n      let authorities = [];\r\n      for (let e of role.extend) {\r\n        addAuthorities(authorities, await getAuthorities(e));\r\n      }\r\n      for (let aName of role.authorities) {\r\n        addAuthorities(authorities, [await authorityModel.where({name: aName}).find()]);\r\n      }\r\n      return authorities;\r\n    };\r\n\r\n    return getAuthorities(name);\r\n  };\r\n}"
    ]
}