{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\rest\\controller\\base.js"
    ],
    "names": [],
    "mappings": "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",
    "file": "..\\..\\..\\src\\rest\\controller\\base.js",
    "sourcesContent": [
        "'use strict';\r\n\r\nexport default class Base extends think.controller.rest {\r\n  modelInstance;\r\n  modelPk;\r\n\r\n  needPaging;\r\n  pageCount;\r\n  listOrder;\r\n\r\n  init(...args) {\r\n    super.init(...args);\r\n    this.modelInstance = null;\r\n    this.modelPk = null;\r\n    this.needPaging = 1;\r\n    this.pageCount = think.config('site.defaultPageCount');\r\n    this.listOrder = {'createAt': -1}\r\n  }\r\n\r\n  async getAction() {\r\n    let data;\r\n    if (this.id) {\r\n      data = await this.modelInstance\r\n        .where({[this.modelPk]: this.id})\r\n        .find();\r\n    } else {\r\n      let filter = this.param('filter');\r\n      let listOrder = this.param('listOrder');\r\n      let needPaging = +(this.param('needPaging') || this.needPaging);\r\n      let pageNo = +this.param('pageNo') > 0 ? +this.param('pageNo') : 1;\r\n      let pageCount = +(this.param('pageCount') || this.pageCount);\r\n\r\n      if (listOrder && !think.isEmpty(JSON.parse(listOrder))) {\r\n        listOrder = JSON.parse(listOrder);\r\n      } else {\r\n        listOrder = this.listOrder;\r\n      }\r\n\r\n      if (filter && !think.isEmpty(JSON.parse(filter))) {\r\n        filter = JSON.parse(filter);\r\n      } else {\r\n        filter = {};\r\n      }\r\n\r\n      if (needPaging) {\r\n        data = await this.modelInstance\r\n          .where(filter)\r\n          .order(listOrder)\r\n          .page(pageNo, pageCount)\r\n          .select();\r\n      } else {\r\n        data = await this.modelInstance.where(filter).order(listOrder).select();\r\n      }\r\n    }\r\n    return this.success(data);\r\n\r\n  }\r\n\r\n  async postAction() {\r\n\r\n    let data = this.post();\r\n    delete data[this.modelPk];\r\n    if (think.isEmpty(data)) {\r\n      return this.fail(\"data is empty\");\r\n    }\r\n    let insertId = await this.modelInstance.add(data);\r\n    return this.success({id: insertId});\r\n  }\r\n\r\n  async deleteAction() {\r\n\r\n    if (!this.id) {\r\n      return this.fail(\"params error\");\r\n    }\r\n    console.log(this.modelPk, ' delete');\r\n    let rows = await this.modelInstance.where({[this.modelPk]: this.id}).delete();\r\n    return this.success({affectedRows: rows});\r\n  }\r\n\r\n  async putAction() {\r\n\r\n    if (!this.id) {\r\n      return this.fail(\"params error\");\r\n    }\r\n    let data = this.post();\r\n    delete data[this.modelPk];\r\n    if (think.isEmpty(data)) {\r\n      return this.fail(\"data is empty\");\r\n    }\r\n    let rows = await this.modelInstance.where({[this.modelPk]: this.id}).update(data);\r\n    return this.success({affectedRows: rows});\r\n  }\r\n\r\n  /**\r\n   * @param obj the base object\r\n   * @param arr array of Object which desc popular key and collection name. for example:{key:'author',ref:'users'}\r\n   *\r\n   */\r\n  async populate(obj, arr) {\r\n    let model;\r\n    let key;\r\n    for (let i of arr) {\r\n      model = this.model(i.ref);\r\n      key = i.key;\r\n      if (think.isArray(obj[key])) {\r\n        for (let j of obj[key]) {\r\n          obj[key].push(await model.where({'_id': j + ''}).find());\r\n          obj[key].shift();\r\n        }\r\n      } else {\r\n        obj[key] = await model.where({'_id': obj[key] + ''}).find();\r\n      }\r\n\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  async helper() {\r\n\r\n  }\r\n}"
    ]
}